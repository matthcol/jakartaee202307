package org.example.entity;

import jakarta.persistence.*;
import lombok.*;
import org.example.enums.Pg;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static jakarta.persistence.GenerationType.IDENTITY;

// lombok
@NoArgsConstructor // needed by JPA
@AllArgsConstructor // test
@Builder    // test
@Getter // needed by JPA
@Setter // needed by JPA
@ToString(of = {"id", "title", "year"}) // test + log
// JPA
@Entity // this class is persistent, by default table name = class name
@Table(
        name = "movies",
        uniqueConstraints = @UniqueConstraint(
                name = "unique_movie_title_year",
                columnNames = {"title", "year"}
        )
)
public class Movie {
    // NB: id can be null if movie object is not saved in DB
    // PK will be generated by DB
    @Id
    @GeneratedValue(strategy = IDENTITY)
    private Integer id;

    @Column(nullable = false, length = 300) // NOT NULL + VARCHAR(300) in DB
    private String title;

    // NB: primitive type => NOT NULL in DB
    private short year;

    private Short duration; // nullable = true

    @Enumerated(EnumType.STRING) // default: ORDINAL
    @Column(length = 5)
    private Pg pg;

    @Column(name="poster_uri", length=300)
    private String posterUri;

    @Column(length=4000)
    private String synopsis;

    // @Transient // non persistent field, useful: bug, update
    @ManyToOne
    @JoinColumn(name="director_id") // nullable = True (default)
    private Person director;

    @ManyToMany
    @JoinTable(
            name="play",
            joinColumns = @JoinColumn(name="movie_id"),
            inverseJoinColumns = @JoinColumn(name="actor_id")
    )
    @Builder.Default
    private Set<Person> actors = new HashSet<>();
}
